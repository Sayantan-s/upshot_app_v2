// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User enums and types::
enum InterestsType {
  PT // "Productivity"
  MT // "Marketing"
  AI // "Artificial Intelligence"
  FT // "FinTech"
  ET // "EdTech"
  OSS // "Open Source"
  DTT // "Developer Tool"
  SaaS // "SAAS"
}

enum CurrencyType {
  INR
  Dollar
}

model User {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  email        String          @unique
  newUser      Boolean?        @default(true)
  userName     String          @unique
  pwd          String
  refreshToken String?
  firstName    String?
  lastName     String?
  about        String?
  interests    InterestsType[]
  profilePic   String?
  coverPic     String?
  location     String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  createdBy    String          @default("system")
  updatedBy    String          @default("system")

  // Relation::
  products Product[]

  @@map("user_dtl")
}

// Product enums and types::

enum ProductPriceCurrency {
  USD
  INR
}

enum ProductStatus {
  IDLE
  COMING_SOON
  LAUNCHED
  SOLD
}

type ProductMedia {
  productLogo  String
  productCover String?
}

type ProductPrice {
  amount   Float
  currency ProductPriceCurrency
  soldAt   Float
}

model Product {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  productName        String
  productMoto        String
  productDescription String?
  media              ProductMedia?
  tags               InterestsType[]
  price              ProductPrice?
  status             ProductStatus?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now()) @updatedAt
  launchedAt         DateTime?
  createdBy          String                @default("system")
  updatedBy          String                @default("system")

  // Relation::
  shots Shot[]

  userId String @db.ObjectId
  user   User?  @relation(fields: [userId], references: [id])

  @@map("product_dtl")
}

// Shot enums and types::

enum ShotStatus {
  IDLE
  SCHEDULED
  SHOOT
}

model Shot {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  productType ProductStatus
  status      ShotStatus
  votes       Int
  media       String[]
  launchedAt  DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  createdBy   String        @default("system")
  updatedBy   String        @default("system")

  // Relation::

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@map("shot_dtl")
}
